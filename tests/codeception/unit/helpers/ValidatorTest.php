<?php

namespace unit\helpers;

use skewer\helpers\Validator;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2013-01-10 at 17:10:49.
 */
class ValidatorTest extends \Codeception\Test\Unit
{
    /**
     * Проверка строки на допустимые симвлолы для url.
     *
     * @dataProvider providerIsUrl
     * @covers \skewer\helpers\Validator::isUrl
     *
     * @param mixed $sIn
     * @param mixed $sOut
     */
    public function testIsUrl($sIn, $sOut)
    {
        $this->assertSame($sOut, Validator::isUrl($sIn), 'ошибка в валидации url');
    }

    /**
     * Провайдер данных для тестов на url.
     *
     * @return array
     */
    public function providerIsUrl()
    {
        return [
            ['http://www.yandex.ru/', 'http://www.yandex.ru/'],
            ['www.yandex.ru/', 'http://www.yandex.ru/'],
            ['httpas://www.yandex.ru/', false],
            ['http://www.yandex.ru/path/index.php', 'http://www.yandex.ru/path/index.php'],
        ];
    }

    /**
     * Проверка строки на допустимые симвлолы для логина.
     *
     * @dataProvider providerIsLogin
     * @covers \skewer\helpers\Validator::isLogin
     *
     * @param mixed $sIn
     * @param mixed $sOut
     */
    public function testIsLogin($sIn, $sOut)
    {
        $this->assertSame($sOut, Validator::isLogin($sIn), '');
    }

    /**
     * Провайдер данных для теста на логин.
     *
     * @return array
     */
    public function providerIsLogin()
    {
        return [
            ['qweqwe', 'qweqwe'],
            ['qweqwe%', false],
            ['', false],
            ['asd', 'asd'],
            ['da', false],
            ['кот', false],
            ['qwe@ewq.wq', 'qwe@ewq.wq'],
        ];
    }

    /**
     * @dataProvider providerIsValidHostName
     * @covers \skewer\helpers\Validator::isValidHostName
     *
     * @param mixed $sIn
     * @param mixed $sOut
     */
    public function testIsValidHostName($sIn, $sOut)
    {
        $this->assertSame($sOut, Validator::isValidHostName($sIn));
    }

    /**
     * провайдер данных для теста на имя площадки.
     *
     * @return array
     */
    public function providerIsValidHostName()
    {
        return [
            ['test-dimain', true],
            ['test_dimain', false], // "_" запрещен
            ['a', true],
            ['9sd', false], // нельзя с цифры
            ['русский', false],
            ['a234567890a234567890a234567890a234567890a234567890a2345678901234', true], // 64 символа
            ['a234567890a234567890a234567890a234567890a234567890a23456789012345', false], // 65
        ];
    }

    /**
     * @dataProvider providerCheckIP
     * @covers \skewer\helpers\Validator::checkIP
     *
     * @param mixed $sInIp
     * @param mixed $sInMask
     * @param mixed $sOut
     */
    public function testCheckIP($sInIp, $sInMask, $sOut)
    {
        $this->assertSame($sOut, Validator::checkIP($sInIp, $sInMask));
    }

    /**
     * Провайдер данных для проверки ip.
     *
     * @return array
     */
    public function providerCheckIP()
    {
        return [
            // true
            ['192.168.12.48', '*', true],
            ['192.168.1.1', '192.168.1.1', true],
            ['192.168.12.48', '192.168.0.0/16', true],
            ['192.168.12.48', '192.168.12.48/0', true],
            ['192.168.12.48', '192.168.1.0/32', true],
            // false
            ['192.168.1.1', '192.168.1.2', false],
            ['192.168.12.48', '192.168.1.0/8', false],
            ['192.168.12.48', '192.168.1.0/0', false],
        ];
    }

    /**
     * @dataProvider providerCheckIPException
     * @covers \skewer\helpers\Validator::checkIP
     *
     * @param mixed $sInIp
     * @param mixed $sInMask
     */
    public function testCheckIPException($sInIp, $sInMask)
    {
        $this->expectException(\ErrorException::class);

        Validator::checkIP($sInIp, $sInMask);
    }

    /**
     * Провайдер данных для проверки ip c ошибочным форматом
     *
     * @return array
     */
    public function providerCheckIPException()
    {
        return [
            ['192.168.12.48', '192.168.1.0/33'],
            ['192.168.12.48', '192.168.1.0/-1'],
            ['192.168.12.48', 'ksad'],
            ['192.168.12.48', '192..154.54'],
            ['192.168.12.48', 'asdasa'],
            ['192.168.12.', 'asdasa'],
            //array('492.168.12.48','492.45.154.54' ), - сейчас срабатывает
        ];
    }

    /**
     * @dataProvider providerIsEmail
     * @covers \skewer\helpers\Validator::isEmail
     *
     * @param string $sIn
     * @param bool $bOut
     */
    public function testIsEmail($sIn, $bOut)
    {
        $this->assertSame(
            $bOut,
            Validator::isEmail($sIn),
            sprintf('Failed that [%s] is %s', $sIn, $bOut ? 'valid' : 'not valid')
        );
    }

    /**
     * провайдер данных для теста на имя площадки.
     *
     * @return array
     */
    public function providerIsEmail()
    {
        return [
            ['', false],
            ['safqavsd@fasef.fe', true],
            ['safqa.vsd@fasef.fed', true],
            ['safqa.vsd@вашсайт.fe', true],
            ['safqa+vsd@fasef.fe', true],
            ['safqa+vsd@fa+sef.fe', false],
            ['a@sapozhkov.ru', true],

            ['no-reply@shitikov.ru', true],
            ['no-reply@xn--80ab3chj.xn--p1ai', true],
            ['no-reply@бахус.рф', true],
            ['бахус@бахус.рф', true],
            ['xn--80aa8ab@xn--80aa7bb.xn--p1ai', true],
            ['xn--@-7sbbbc8gdleof.xn--p1ai', false],
            ['no-reply@бах+ус.рф', false],
            ['мама@папа.рф', true],
            ['мама@папа.бел', true],
        ];
    }
}
