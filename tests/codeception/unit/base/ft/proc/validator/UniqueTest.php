<?php

namespace unit\base\ft\proc\validator;

use skewer\base\ft\proc\validator\Unique;
use unit\base\ft\TestHelper;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2013-11-22 at 11:56:07.
 */
class UniqueTest extends \Codeception\Test\Unit
{
    /**
     * @var Unique
     */
    protected $v;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        require_once __DIR__ . '/../../TestHelper.php';

        TestHelper::init();

        $this->v = new Unique();
    }

    /**
     * Тест проверки уникальности по одному полю.
     *
     * @covers \skewer\base\ft\proc\validator\Unique::isValid
     */
    public function testIsValidOne()
    {
//        $oQuery = TestHelper::getTable();
//
//        $oModel = $oQuery->getModel();
//        $oModel->getFiled('string')->addValidator('unique');
//
//        /** @var TestArRow $oItem1 */
//        $oItem1 = $oQuery->getNewRow();
//        $oItem1->string = 'test1';
//        $this->assertNotEmpty( $oItem1->save(), 'запись не добалена' );
//
//        /** @var TestArRow $oItem2 */
//        $oItem2 = $oQuery->getNewRow();
//        $oItem2->string = 'test1';
//
//        $this->assertEmpty( $oItem2->save(), 'дублирующая запись добалена' );
//
//        $this->assertArrayHasKey( 'string', $oItem2->getErrorList() );
//
//        $oItem2->string = 'test2';
//        $this->assertNotEmpty( $oItem2->save(), 'не дублирующая запись не добалена' );
    }

    /**
     * Тест проверки уникальности по одному набору полей.
     *
     * @covers \skewer\base\ft\proc\validator\Unique::isValid
     */
    public function testIsValidMulty()
    {
//        $oQuery = TestHelper::getTable();
//
//        $oModel = $oQuery->getModel();
//        $oModel
//            ->getFiled('string')
//            ->addValidator(
//                'unique',
//                array(
//                    Unique::FIELDS => array(
//                        'string',
//                        'text'
//                    )
//                )
//            )
//        ;
//
//        //var_dump( $oModel->getFiled('string')->getValidatorList() );
//
//        /** @var TestArRow $oItem1 */
//        $oItem1 = $oQuery->getNewRow();
//        $oItem1->string = 'test1';
//        $oItem1->text = 'test';
//        $this->assertNotEmpty( $oItem1->save(), '[1] запись не добалена' );
//
//        /** @var TestArRow $oItem2 не как 1*/
//        $oItem2 = $oQuery->getNewRow();
//        $oItem2->string = 'test2';
//        $oItem2->text = 'test';
//
//        $this->assertNotEmpty( $oItem2->save(), '[2] не дублирующая не запись добалена' );
//
//        /** @var TestArRow $oItem3 как 1*/
//        $oItem3 = $oQuery->getNewRow();
//        $oItem3->string = 'test1';
//        $oItem3->text = 'test';
//
//        $this->assertEmpty( $oItem3->save(), '[3] дублирующая запись добалена' );
//
//        $this->assertArrayHasKey( 'string', $oItem3->getErrorList() );
//
//        // меняем значение
//        $oItem3->text = 'test2';
//
//        $oItem3->save();
//
//        $this->assertNotEmpty( $oItem3->save(), '[3] не дублирующая запись не добалена' );
    }

    /**
     * Тест проверки для пустого значения по одному полю.
     *
     * @covers \skewer\base\ft\proc\validator\Unique::isValid
     */
    public function testIsValidEmptyOne()
    {
//        $oQuery = TestHelper::getTable();
//
//        $oModel = $oQuery->getModel();
//        $oModel->getFiled('string')->delValidator('set');
//        $oModel->getFiled('text')->addValidator('unique');
//
//        /** @var TestArRow $oItem1 */
//        $oItem1 = $oQuery->getNewRow();
//        $oItem1->string = 'test1';
//        $oItem1->text = '';
//        $this->assertNotEmpty( $oItem1->save(), 'запись не добалена' );
//
//        /** @var TestArRow $oItem2 */
//        $oItem2 = $oQuery->getNewRow();
//        $oItem2->string = 'test1';
//        $oItem2->text = '';
//
//        $this->assertNotEmpty( $oItem2->save(), 'дублирующая запись не добалена' );
    }

    /**
     * Тест проверки для пустого значения по многим полям
     *
     * @covers \skewer\base\ft\proc\validator\Unique::isValid
     */
    public function testIsValidEmptyMulty()
    {
//        $oQuery = TestHelper::getTable();
//
//        $oModel = $oQuery->getModel();
//        $oField = $oModel->getFiled( 'string' );
//        $oField->delValidator('set');
//        $oField
//            ->addValidator(
//                'unique',
//                array(
//                    Unique::FIELDS => array(
//                        'string',
//                        'text'
//                    )
//                )
//            )
//        ;
//
//
//        /** @var TestArRow $oItem1 */
//        $oItem1 = $oQuery->getNewRow();
//        $oItem1->string = '';
//        $oItem1->text = '';
//        $this->assertNotEmpty( $oItem1->save(), '[1] пустая запись не добалена' );
//
//        /** @var TestArRow $oItem2 не как 1*/
//        $oItem2 = $oQuery->getNewRow();
//        $oItem2->string = '';
//        $oItem2->text = '';
//        $this->assertNotEmpty( $oItem2->save(), '[2] пустая запись не добалена' );
//
//        /** @var TestArRow $oItem3 */
//        $oItem3 = $oQuery->getNewRow();
//        $oItem3->string = '';
//        $oItem3->text = 'qwe';
//        $this->assertNotEmpty( $oItem3->save(), '[3] не пустая запись не добалена' );
//
//        /** @var TestArRow $oItem4 не как 3*/
//        $oItem4 = $oQuery->getNewRow();
//        $oItem4->string = '';
//        $oItem4->text = 'qwe';
//        $this->assertEmpty( $oItem4->save(), '[4] не пустая запись добалена' );
    }

    /**
     * @covers \skewer\base\ft\proc\validator\Unique::getErrorText
     */
    public function testGetErrorText()
    {
//        $this->assertNotEmpty( $this->v->getErrorText() );
    }

//    /**
//     * Тест ошибки в модели
//     * @expectedException \skewer\base\ft\exception\Model qwe
//     */
//    public function testError() {
//
//        $oQuery = TestHelper::getTable();
//
//        $oModel = $oQuery->getModel();
//        $oModel
//            ->getFiled('string')
//            ->addValidator(
//                'unique',
//                array(
//                    Unique::FIELDS => array(
//                        'string',
//                        'qwe'
//                    )
//                )
//            )
//        ;
//
//        /** @var TestArRow $oItem1 */
//        $oItem1 = $oQuery->getNewRow();
//        $oItem1->string = 'test1';
//        $oItem1->save();
//
//    }
}
