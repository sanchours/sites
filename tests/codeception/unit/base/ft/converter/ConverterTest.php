<?php

namespace unit\base\ft\converter;

use skewer\base\ft;
use skewer\base\ft\converter\Arr;
use skewer\base\ft\converter\ConverterInterface;
use skewer\base\ft\converter\Json;
use skewer\base\ft\converter\Yaml;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2013-07-30 at 15:59:49.
 */
class ConverterTest extends \Codeception\Test\Unit
{
    /**
     * Набор конвертеров для тестирования.
     *
     * @return array
     */
    public function providerConverter()
    {
        return [
            [new Arr()],
            [new Json()],
            [new Yaml()],
        ];
    }

    /** @var ft\Model */
    protected $oBaseModel;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $oEntity = ft\Entity::get('test_converter_table')
            ->clear()

            ->setTableType(ft\DBTable::TypeInnoDb)

            ->setTablePrefix('ccco__')

            ->setNamespace('sk\qwe\www')

            ->setType(1)

            ->setParentId(456)

            ->addField('a', 'int', 'a')
            ->setEditor('select', [
                    'list' => [1, 2, 3, 4, 5],
                ])
            ->setAttr('testAttr1', 123)
            ->addField('b', 'int(1)', 'b')
            ->addField('c', 'int(1)', 'c')

            ->selectFields('a,b,c')
            ->setAttr('testAttr2', 321)
            ->parameter('testParam', 456)

            ->selectFields(['a', 'b', 'c'])
            ->addIndex('index', '')

            ->addField('date', 'date', 'Дата та')

            ->addField('string1', 'varchar(245)', 'Строка')
            ->addValidator('set1')
            ->addValidator('set2')
            ->addModificator('m1')
            ->addModificator('m2')
            ->addWidget('w1')
            ->addWidget('w2')
            ->setDefaultVal('hello')

            ->addField('text', 'text', 'text')
            ->addValidator('set')

            ->addColumnSet('editor', 'date,string,text')

            ->addField('parent', 'int', 'Родительская')

            ->addDefaultProcessorSet()

            ->addRelation('-<', 'ccco_test_converter_table', 'parent', 'id1', 'id2')

            ->save()
            ->build();

        $this->oBaseModel = $oEntity->getModel();

        $this->oBaseModel->getFiled('string1')->setAttr('show', '10');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * Логика проверки такая:
     *  1. берем только что сформированную модель
     *  2. генерируем из нее данные объектом
     *  3. из данных генерируем новую модель методом того же преобразователя
     *  4. сравниваем новую модель по каждому из показателей с введенными значениями
     *      * имя таблицы
     *      * название сущности
     *      * префикс сущности
     *      * поля
     *          * название
     *          * псевдоним
     *          * тип и размер
     *          * процессоры
     *              * модификаторы
     *              * валидаторы
     *              * виджеты
     *              * редакторы
     *      * индексы
     *      * группы полей
     *      ...
     *
     * @param ConverterInterface $oConverter
     * @covers \skewer\base\ft\converter\Json
     * @covers \skewer\base\ft\converter\Yaml
     * @dataProvider providerConverter
     */
    public function testDataToFtModel(ConverterInterface $oConverter)
    {
        $this->assertInstanceOf(
            'skewer\base\ft\converter\ConverterInterface',
            $oConverter,
            'Класс преобразователя должен реализовывать интерфейс ConverterInterface'
        );

        $mData = $oConverter->ftModelToData($this->oBaseModel);
        $oModel = $oConverter->dataToFtModel($mData);

        $this->checkMeta($oModel);
        $this->checkFields($oModel);
        $this->checkValidators($oModel);
        $this->checkIndexes($oModel);
        $this->checkEditor($oModel);
        $this->checkRelations($oModel);
    }

    /**
     * Проверка данных модели.
     *
     * @param ft\Model $oModel
     */
    private function checkMeta(ft\Model $oModel)
    {
        $this->assertInstanceOf('skewer\base\ft\Model', $oModel, 'Не верный класс объекта  при обратном преобразовании');

        $this->assertSame('test_converter_table', $oModel->getName(), 'имя сущности получено неверно');

        $this->assertSame('sk\qwe\www', $oModel->getNamespace(), 'пространство имен не восстановлено');

        $this->assertSame(1, $oModel->getType(), 'не восстановлен тип карточки');

        $this->assertSame('ccco__', $oModel->getTablePrefix(), 'префикс таблицы получен неверно');

        $this->assertSame(456, $oModel->getParentId(), 'не получен id родительской сущности');

        $this->assertSame('ccco__test_converter_table', $oModel->getTableName(), 'имя таблицы получено неверно');

        $this->assertSame(ft\DBTable::TypeInnoDb, $oModel->getTableType(), 'тип таблицы получен неверно');
    }

    /**
     * Провека полей.
     *
     * @param ft\Model $oModel
     */
    private function checkFields(ft\Model $oModel)
    {
        $this->assertSame('ccco__test_converter_table', $oModel->getTableName(), 'имя таблицы получено неверно');

        $this->assertSame(
            ['id', 'a', 'b', 'c', 'date', 'string1', 'text', 'parent'],
            $oModel->getAllFieldNames(),
            'поля переданы неверно'
        );

        $oField = $oModel->getFiled('string1');
        $this->assertNotEmpty($oField, 'поле не найдено');

        $this->assertNotEmpty($oField, 'поле не найдено');

        $this->assertSame('10', $oField->getAttr('show'), 'не найден атрибут у поля');

        // поля
        $this->assertSame('Строка', $oField->getTitle(), 'неверное название поля');
        $this->assertSame('string1', $oField->getName(), 'неверное имя поля');
        $this->assertSame('varchar', $oField->getDatatype(), 'неверный тип поля');
        $this->assertSame(245, $oField->getSize(), 'неверный размер поля');
        $this->assertSame('varchar(245)', $oField->getDatatypeFull(), 'неверный полный тип поля');
        $this->assertSame('hello', $oField->getDefault(), 'неверное значение по умолчанию для поля');

        // атрибуты
        $oAField = $oModel->getFiled('a');
        $oBField = $oModel->getFiled('b');
        $this->assertSame(123, $oAField->getAttr('testAttr1'));
        $this->assertSame(321, $oAField->getAttr('testAttr2'));
        $this->assertEmpty($oBField->getAttr('testAttr1'));
        $this->assertSame(321, $oBField->getAttr('testAttr2'));
        $this->assertSame(456, $oBField->getParameter('testParam'));
    }

    /**
     * Проверка индексов.
     *
     * @param ft\Model $oModel
     */
    private function checkIndexes(ft\Model $oModel)
    {
        $aIndex = $oModel->getIndexes();

        $this->assertArrayHasKey(
            'PRIMARY',
            $aIndex,
            'нет первичного индекса'
        );

        $this->assertArrayHasKey(
            'a',
            $aIndex,
            'нет мульти индекса'
        );

        // Первичный индекс
        $oPrimaryIndex = $aIndex['PRIMARY'];

        $this->assertCount(2, $aIndex, 'неверное число индексов');
        $this->assertInstanceOf(
            'skewer\base\ft\model\Index',
            $oPrimaryIndex,
            'неверный тип первичного индекса'
        );

        $this->assertSame('PRIMARY', $oPrimaryIndex->getName(), 'неверное имя индекса');
        $this->assertSame(['id'], $oPrimaryIndex->getFileds(), 'неверный состав полей индекса');

        // Мульти индекс
        $oMultiIndex = $aIndex['a'];

        $this->assertInstanceOf('skewer\base\ft\model\Index', $oMultiIndex, 'неверный тип составного индекса');

        $this->assertSame('a', $oMultiIndex->getName(), 'неверное имя индекса');
        $this->assertSame(['a', 'b', 'c'], $oMultiIndex->getFileds(), 'неверный состав полей индекса');
    }

    /**
     * Проверяет наличие связей.
     *
     * @param ft\Model $oModel
     */
    private function checkRelations(ft\Model $oModel)
    {
        $oRelation = $oModel->getOneFieldRelation('parent');

        $this->assertNotNull($oRelation, 'связь не найдена');

        $this->assertSame('parent', $oRelation->getContentField(), 'контейнер не совпадает');
        $this->assertSame('id1', $oRelation->getInnerFieldName(), 'внутренне поле связи не совпадает');
        $this->assertSame('id2', $oRelation->getExternalFieldName(), 'внешнее поле связи не совпадает');
    }

    /**
     * Проверяет наличие редакторов.
     *
     * @param ft\Model $oModel
     */
    private function checkEditor(ft\Model $oModel)
    {
        $oField = $oModel->getFiled('a');

        $this->assertNotNull($oField, 'поле [a] отсутствует в модели');

        $this->assertSame('select', $oField->getEditorName());
        $this->assertSame(['list' => [1, 2, 3, 4, 5]], $oField->getEditorParams());
    }

    /**
     * Проверка валидаторов.
     *
     * @param ft\Model $oModel
     */
    private function checkValidators(ft\Model $oModel)
    {
        $oField = $oModel->getFiled('string1');

        $aData = $oField->getModelArray();

        $this->assertCount(2, $aData['validator']);
        $this->assertSame('set2', $aData['validator'][1]['name']);
    }
}
