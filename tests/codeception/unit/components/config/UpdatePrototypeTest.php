<?php

namespace unit\components\config;

use skewer\components\config\BuildRegistryUpdater;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2013-03-13 at 15:36:58.
 */
class UpdatePrototypeTest extends \Codeception\Test\Unit
{
    /**
     * @var BuildRegistryUpdater
     */
    protected $config;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->config = new BuildRegistryUpdater();
//        $this->config->loadFile( ROOTPATH.'tests/data/config/config.php' );
    }

    /**
     * @covers \skewer\components\config\UpdatePrototype::hasChanges
     */
    public function testHasChangesSet()
    {
        $oConfig = new BuildRegistryUpdater();
        $this->assertFalse($oConfig->hasChanges());
        $oConfig->set('qwe', 12);
        $this->assertTrue($oConfig->hasChanges());
    }

    /**
     * @covers \skewer\components\config\UpdatePrototype::hasChanges
     * @covers \skewer\components\config\UpdatePrototype::setHasChanges
     */
    public function testHasChangesRemove()
    {
        $oConfig = new BuildRegistryUpdater();
        $this->assertFalse($oConfig->hasChanges());
        $oConfig->remove('buildConfig');
        $this->assertTrue($oConfig->hasChanges());
    }

    /**
     * Тест сохранения данных.
     *
     * @covers \skewer\components\config\UpdatePrototype::commitChanges
     * @covers \skewer\components\config\Prototype::getData
     * @covers \skewer\components\config\Prototype::setData
     */
    public function testCommitChanges()
    {
        $oConfig = new BuildRegistryUpdater();
        $this->assertFalse($oConfig->exists('qwerty'), 'уже есть данные');
        $oConfig->set('qwerty', 123);

        $oConfig2 = new BuildRegistryUpdater();
        $this->assertFalse($oConfig2->exists('qwerty'), 'остались данные без коммита');
        $oConfig2->set('qwerty', 123);
        $oConfig2->commitChanges();

        $oConfig3 = new BuildRegistryUpdater();
        $this->assertTrue($oConfig3->exists('qwerty'), 'нет данных после коммита');
    }

    /**
     * Тест удаления.
     *
     * @covers \skewer\components\config\UpdatePrototype::remove
     * @covers \skewer\components\config\UpdatePrototype::removeByArray
     */
    public function testRemove()
    {
        $sName = 'val.val.val1';
        $iVal = 456876;
        $this->assertFalse(
            $this->config->exists($sName),
            'тестовые данные уже существуют'
        );

        $this->assertTrue(
            $this->config->set($sName, $iVal),
            'неверный ответ прои добавлении'
        );

        $this->assertTrue(
            $this->config->exists($sName),
            'тестовые данные не добавлены'
        );

        $this->assertTrue(
            $this->config->remove($sName),
            'неверный ответ прои добавлении'
        );

        $this->assertFalse(
            $this->config->exists($sName),
            'тестовые данные уже существуют'
        );
    }

    /**
     * Тест удаления.
     *
     * @covers \skewer\components\config\UpdatePrototype::remove
     * @covers \skewer\components\config\UpdatePrototype::removeByArray
     */
    public function testRemoveByArr()
    {
        $aName = ['val', 'val', 'val1'];
        $iVal = 456876;
        $this->assertFalse(
            $this->config->exists($aName),
            'тестовые данные уже существуют'
        );

        $this->assertTrue(
            $this->config->set($aName, $iVal),
            'неверный ответ прои добавлении'
        );

        $this->assertTrue(
            $this->config->exists($aName),
            'тестовые данные не добавлены'
        );

        $this->assertTrue(
            $this->config->remove($aName),
            'неверный ответ при удалении'
        );

        $this->assertFalse(
            $this->config->remove($aName),
            'неверный ответ при повторном удалении'
        );

        $this->assertFalse(
            $this->config->exists($aName),
            'тестовые данные не удалены'
        );
    }

    /**
     * @covers \skewer\components\config\UpdatePrototype::append
     * @covers \skewer\components\config\UpdatePrototype::setByArray
     */
    public function testAppend()
    {
        $sName = 'val.val.val1';
        $this->assertNull(
            $this->config->get($sName),
            'тестовые данные уже существуют'
        );

        $this->config->append($sName, 12);

        $this->assertSame(
            [12],
            $this->config->get($sName),
            'тестовые данные не добавлены'
        );

        $this->config->append($sName, 34);

        $this->assertSame(
            [12, 34],
            $this->config->get($sName),
            'тестовые данные не добавлены к уже имеющимся'
        );
    }

    /**
     * @covers \skewer\components\config\UpdatePrototype::append
     */
    public function testAppendFail()
    {
        $this->expectException(\skewer\components\config\Exception::class);

        $sName = 'val.val.val2';
        $this->config->set($sName, 12);

        $this->assertSame(
            12,
            $this->config->get($sName),
            'тестовые данные не добавлены'
        );

        $this->config->append($sName, 34);
    }

    /**
     * @covers \skewer\components\config\UpdatePrototype::setByArray
     */
    public function testSetFail()
    {
        $this->expectException(\skewer\components\config\Exception::class);
        $this->expectExceptionMessage('reached');

        $this->config->set('val.val.val1', 12);
        $this->config->set('val.val.val1.wq', 12);
    }

    /**
     * Тест проверки наличия изменений.
     *
     * @covers \skewer\components\config\UpdatePrototype::hasChanges
     * @covers \skewer\components\config\UpdatePrototype::setHasChanges
     */
    public function testHasChanges()
    {
        $this->assertFalse(
            $this->config->hasChanges(),
            'неверно отдается наличие изменений до изменений'
        );

        $this->config->append('val.val.val1', 12);

        $this->assertTrue(
            $this->config->hasChanges(),
            'неверно отдается наличие изменений после изменений'
        );
    }

    /**
     * Тест метода установки.
     *
     * @covers \skewer\components\config\UpdatePrototype::set
     * @covers \skewer\components\config\UpdatePrototype::setByArray
     */
    public function testSet()
    {
        $sName = 'val.val.val1';
        $iVal = 456876;
        $this->assertFalse(
            $this->config->exists($sName),
            'тестовые данные уже существуют'
        );

        $this->assertTrue(
            $this->config->set($sName, $iVal),
            'неверный ответ прои добавлении'
        );

        $this->assertTrue(
            $this->config->exists($sName),
            'тестовые данные не добавлены'
        );

        $this->assertSame(
            $iVal,
            $this->config->get($sName),
            'неверный ответ прои добавлении'
        );
    }

    /**
     * Тест метода установки.
     *
     * @covers \skewer\components\config\UpdatePrototype::set
     * @covers \skewer\components\config\UpdatePrototype::setByArray
     */
    public function testSetByArr()
    {
        $aName = ['val', 'val', 'val1'];
        $iVal = 456876;
        $this->assertFalse(
            $this->config->exists($aName),
            'тестовые данные уже существуют'
        );

        $this->assertTrue(
            $this->config->set($aName, $iVal),
            'неверный ответ прои добавлении'
        );

        $this->assertTrue(
            $this->config->exists($aName),
            'тестовые данные не добавлены'
        );

        $this->assertSame(
            $iVal,
            $this->config->get('val.val.val1'),
            'неверный ответ прои добавлении'
        );
    }

    /**
     * Тест отката.
     *
     * @covers \skewer\components\config\UpdatePrototype::revertChanges
     */
    public function testRevertChanges()
    {
        $aName = ['val', 'val', 'val1'];
        $iVal = 456876;
        $this->assertFalse(
            $this->config->exists($aName),
            'тестовые данные уже существуют'
        );

        // добавляем данные
        $this->config->set($aName, $iVal);

        $this->assertTrue(
            $this->config->exists($aName),
            'тестовые данные не добавлены'
        );

        // откатываем
        $this->config->revertChanges();

        $this->assertFalse(
            $this->config->exists($aName),
            'тестовые данные не откачены'
        );

        $this->assertFalse(
            $this->config->hasChanges(),
            'не сброшен флаг наличия изменений'
        );
    }

    /**
     * Тест отката.
     *
     * @covers \skewer\components\config\UpdatePrototype::clear
     */
    public function testClear()
    {
        $aName = ['val', 'val', 'val1'];
        $iVal = 456876;
        $this->assertFalse(
            $this->config->exists($aName),
            'тестовые данные уже существуют'
        );

        // добавляем данные
        $this->config->set($aName, $iVal);

        $this->assertTrue(
            $this->config->exists($aName),
            'тестовые данные не добавлены'
        );

        // откатываем
        $this->config->clear();

        $this->assertFalse(
            $this->config->exists($aName),
            'тестовые данные не откачены'
        );

        $this->assertTrue(
            $this->config->hasChanges(),
            'не сброшен флаг наличия изменений'
        );
    }
}
