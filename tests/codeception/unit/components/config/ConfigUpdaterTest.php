<?php

namespace unit\components\config;

use skewer\components\config;
use skewer\components\config\ConfigUpdater;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2013-03-13 at 15:05:01.
 */
class ConfigUpdaterTest extends \Codeception\Test\Unit
{
    /**
     * @var \skewer\components\config\BuildRegistryUpdater объект для отката сделанных изменений
     */
    protected $oBConfigBack;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        ConfigUpdater::init();
        $this->oBConfigBack = new config\BuildRegistryUpdater();
    }

    protected function tearDown()
    {
        // откат
        $this->oBConfigBack->set('a', 1);
        $this->oBConfigBack->remove('a');

        $this->oBConfigBack->commitChanges();
    }

    /**
     * @covers \skewer\components\config\ConfigUpdater::init
     */
    public function testInit()
    {
        ConfigUpdater::init();
    }

    /**
     * @covers \skewer\components\config\ConfigUpdater::buildRegistry
     */
    public function testBuildRegistry()
    {
        $this->assertInstanceOf(
            'skewer\components\config\BuildRegistryUpdater',
            ConfigUpdater::buildRegistry()
        );
    }

    /**
     * Тестирует сохранение данных.
     *
     * @covers \skewer\components\config\ConfigUpdater::commit
     */
    public function testCommit()
    {
        $sKeyB = 'test.build.commit';
        $sVal = 'ksjdksd';

        $this->assertFalse(ConfigUpdater::buildRegistry()->exists($sKeyB));

        ConfigUpdater::buildRegistry()->set($sKeyB, $sVal);

        $oConfigB = new config\BuildRegistryUpdater();

        $this->assertFalse($oConfigB->exists($sKeyB));

        ConfigUpdater::commit();

        $oConfigB = new config\BuildRegistryUpdater();

        $this->assertTrue($oConfigB->exists($sKeyB));
    }

    /**
     * Тест отката.
     *
     * @covers \skewer\components\config\ConfigUpdater::revert
     */
    public function testRevert()
    {
        $sKeyB = 'test.build.revert';
        $sVal = 'ksjdksd';

        $this->assertFalse(ConfigUpdater::buildRegistry()->exists($sKeyB));

        ConfigUpdater::buildRegistry()->set($sKeyB, $sVal);

        $oConfigB = new config\BuildRegistryUpdater();

        $this->assertFalse($oConfigB->exists($sKeyB));

        ConfigUpdater::revert();

        $oConfigB = new config\BuildRegistryUpdater();

        $this->assertFalse($oConfigB->exists($sKeyB));

        $this->assertFalse(ConfigUpdater::buildRegistry()->exists($sKeyB));
    }

    /**
     * @covers \skewer\components\config\ConfigUpdater::createBackup
     * @covers \skewer\components\config\ConfigUpdater::recoverBackup
     */
    public function testBackups()
    {
        $chbKey = 'test.build.chb';
        $valB = 'the build';

        $this->assertFalse(ConfigUpdater::buildRegistry()->exists($chbKey));

        ConfigUpdater::buildRegistry()->set($chbKey, $valB);

        ConfigUpdater::createBackup('testBack');

        ConfigUpdater::buildRegistry()->remove($chbKey);

        $this->assertFalse(ConfigUpdater::buildRegistry()->exists($chbKey));

        ConfigUpdater::recoverBackup('testBack');

        $this->assertSame($valB, ConfigUpdater::buildRegistry()->get($chbKey));

        ConfigUpdater::buildRegistry()->remove($chbKey);
    }

    /**
     * @covers \skewer\components\config\ConfigUpdater::recoverBackup
     */
    public function testRestoreUndefBackup()
    {
        $this->expectException(\skewer\components\config\Exception::class);

        $chbKey = 'test.build.chb';
        $valB = 'the build';

        $this->assertFalse(ConfigUpdater::buildRegistry()->exists($chbKey));

        ConfigUpdater::buildRegistry()->set($chbKey, $valB);

        ConfigUpdater::createBackup('testBack');
        ConfigUpdater::recoverBackup('testBack123');
    }
}
