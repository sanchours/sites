<?php

namespace unit\components\config;

use skewer\base\site\Layer;
use skewer\components\config\BuildRegistry;
use skewer\components\config\BuildRegistryUpdater;
use skewer\components\config\ModuleConfig;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2013-03-13 at 17:49:28.
 */
class BuildRegistryTest extends \Codeception\Test\Unit
{
    /**
     * @var BuildRegistryUpdater объект для отката сделанных изменений
     */
    protected $oConfigBack;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->oConfigBack = new BuildRegistryUpdater();
    }

    protected function tearDown()
    {
        // откат
        $this->oConfigBack->set('a', 1);
        $this->oConfigBack->remove('a');
        $this->oConfigBack->commitChanges();
    }

    /**
     * @covers \skewer\components\config\BuildRegistry::loadData()
     */
    public function testCreate()
    {
        $oConfig = new BuildRegistry();
        $this->assertNotEmpty($oConfig->get('layers'));
        $this->assertNotEmpty($oConfig->get('layers.Page'));
        $this->assertNotEmpty($oConfig->get('layers.Page.modules'));
        $this->assertNotEmpty($oConfig->get('layers.Adm'));
        $this->assertNotEmpty($oConfig->get('policy'));
    }

    /**
     * Тест запроса модуля.
     *
     * @covers \skewer\components\config\BuildRegistry::moduleExists
     * @covers \skewer\components\config\BuildRegistry::getModuleConfig
     * @covers \skewer\components\config\BuildRegistry::getModulePath
     */
    public function testGetModuleConfig()
    {
        $oConfig = new BuildRegistry();
        $oModuleConfig = $oConfig->getModuleConfig('News', Layer::PAGE);

        $this->assertFalse(
            $oConfig->moduleExists('News56789', 'Page'),
            'есть модуль с левым названием'
        );

        $this->assertTrue(
            $oConfig->moduleExists('News', 'Page'),
            'нет модуля [News]'
        );

        $this->assertInstanceOf(
            'skewer\components\config\ModuleConfig',
            $oModuleConfig,
            'ответ неверного типа'
        );

        $oModuleConfig = $oConfig->getModuleConfig('News', Layer::PAGE);

        $this->assertInstanceOf(
            'skewer\components\config\ModuleConfig',
            $oModuleConfig,
            'ответ неверного типа'
        );
    }

    /**
     * Тест запроса левого модуля.
     *
     * @covers \skewer\components\config\BuildRegistry::moduleExists
     * @covers \skewer\components\config\BuildRegistry::getModuleConfig
     * @covers \skewer\components\config\BuildRegistry::getModulePath
     */
    public function testGetModuleConfigFail()
    {
        $this->expectException(\skewer\components\config\Exception::class);
        $this->expectExceptionMessage('Module');

        $oConfig = new BuildRegistry();
        $oConfig->getModuleConfig('News4567890', 'Page');
    }

    private function getAbstarctConfig()
    {
        $aConfig['name'] = 'AbstractModule';
        $aConfig['title'] = 'AbstractModuleTitle';
        $aConfig['version'] = '2.5';
        $aConfig['description'] = 'AbstractModuleDescription';
        $aConfig['revision'] = '0025';
        $aConfig['layer'] = 'Adm';

        /* events */
        $aConfig['events']['goTestAbstractModule'] = [
            'class' => 'unit\components\config\BuildRegistryUpdaterTest',
            'method' => 'goTestHandler',
        ];

        /* Функциональные политики */
        $aConfig['policy'][] = [
            'name' => 'allowAll',
            'title' => 'Разрешить все',
            'default' => 0,
        ];

        $aConfig['policy'][] = [
            'name' => 'allowView',
            'title' => 'Разрешить просмотр',
            'default' => 1,
        ];

        return $aConfig;
    }

    /**
     * Тест запросов ресурсов конфига.
     *
     * @covers \skewer\components\config\BuildRegistry::getEvents
     * @covers \skewer\components\config\BuildRegistry::getFuncPolicyItems
     */
    public function testGetResources()
    {
        $oModuleConfig = new ModuleConfig($this->getAbstarctConfig());

        // объект обновления конфигурации
        $oBuildConfig = new BuildRegistryUpdater();
        $this->assertFalse($oBuildConfig->moduleExists('AbstractModule', 'Adm'));
        $oBuildConfig->registerModule($oModuleConfig);
        $oBuildConfig->commitChanges();

        $oConfig = new BuildRegistry();

        $this->assertNotEmpty($oConfig->getEvents('goTestAbstractModule'));
        $this->assertNotEmpty($oConfig->getFuncPolicyItems('AbstractModule', 'Adm'));
    }

    /**
     * Проверка запроса слоев и модулей слоя.
     *
     * @covers \skewer\components\config\BuildRegistry::getLayerList
     * @covers \skewer\components\config\BuildRegistry::getModuleList
     */
    public function testGetLayers()
    {
        $oConfig = new BuildRegistry();

        $this->assertContains('Adm', $oConfig->getLayerList());
        $this->assertContains('Main', $oConfig->getModuleList('Page'));
    }

    /**
     * Тест запроса параметра конфигурации модуля.
     *
     * @covers \skewer\components\config\BuildRegistry::getModuleConfigParam
     */
    public function testGetModuleConfigParam()
    {
        $oConfig = new BuildRegistry();

        $this->assertNotEmpty(
            $oConfig->getModuleConfigParam('policy', 'LeftList', 'Catalog'),
            'отдаваемое значение пусто'
        );

        $oMainConfig = $oConfig->getModuleConfig('LeftList', 'Catalog');
        $this->assertSame(
            $oMainConfig->getVal('policy'),
            $oConfig->getModuleConfigParam('policy', 'LeftList', 'Catalog')
        );
    }
}
