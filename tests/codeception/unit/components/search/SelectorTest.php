<?php

namespace unit\components\search;

use skewer\components\search\Api;
use skewer\components\search\models\SearchIndex;
use skewer\components\search\Selector;
use skewer\components\search\Type;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-09-05 at 12:56:35.
 */
class SelectorTest extends \Codeception\Test\Unit
{
    /** @var int счетчик для записей */
    public $iCnt = 0;

    const defSection = 123456;

    /**
     * Добавление записи в поисковый индекс
     *
     * @param $sTitle
     * @param $sText
     * @param int $iSection
     */
    private function add($sTitle, $sText = '', $iSection = self::defSection)
    {
        $i = ++$this->iCnt;

        $oRow = new SearchIndex();

        $oRow->search_title = $sTitle;
        $oRow->status = 1;
        $oRow->use_in_search = 1;
        $oRow->use_in_sitemap = 1;
        $oRow->search_text = $sText;
        $oRow->object_id = $i;
        $oRow->class_name = 'Test';
        $oRow->section_id = $iSection;
        $oRow->language = \Yii::$app->language;
        $oRow->href = 'link_' . $i;

        $oRow->save();
    }

    /**
     * Добавление каталожной записи в поисковый индекс
     *
     * @param $sTitle
     * @param $sText
     * @param int $iSection
     */
    private function addCatalog($sTitle, $sText = '', $iSection = self::defSection)
    {
        $i = ++$this->iCnt;

        $oRow = new SearchIndex();

        $oRow->search_title = $sTitle;
        $oRow->status = 1;
        $oRow->use_in_search = 1;
        $oRow->use_in_sitemap = 1;
        $oRow->search_text = $sText;
        $oRow->object_id = $i;
        $oRow->class_name = 'CatalogViewer';
        $oRow->section_id = $iSection;
        $oRow->language = \Yii::$app->language;
        $oRow->href = 'link_' . $i;

        $oRow->save();
    }

    protected function tearDown()
    {
        // грохнуть все тестовые записи
        SearchIndex::deleteAll(['class_name' => 'Test']);

        SearchIndex::deleteAll(['class_name' => 'CatalogViewer', 'section_id' => static::defSection]);
    }

    /**
     * Отдает набор найденных записей.
     *
     * @param string $sText поисковый запрос
     * @param int $iSearchType тип поиска
     * @param int int $iSection
     * @param int[] $aDenySections
     *
     * @return string[]
     */
    private function getSearch($sText, $iSearchType, $iSection = self::defSection, $aDenySections = [])
    {
        $aList = Selector::create()
            ->searchText($sText)
            ->limit(100, 1)
            ->searchType($iSearchType)
            ->type(Type::inInfo)
            ->denySection($aDenySections)
            ->section($iSection)
            ->find();

        if (!isset($aList['items'])) {
            return [];
        }

        return $aList['items'];
    }

    /**
     * Отдает набор найденных записей.
     *
     * @param string $sText поисковый запрос
     * @param int $iSearchType тип поиска
     * @param int int $iSection
     * @param int[] $aDenySections
     *
     * @return string[]
     */
    private function getSearchAll($sText, $iSearchType, $iSection = self::defSection, $aDenySections = [])
    {
        $aList = Selector::create()
            ->searchText($sText)
            ->limit(100, 1)
            ->searchType($iSearchType)
            ->type(Type::inAll)
            ->denySection($aDenySections)
            ->section($iSection)
            ->find();

        if (!isset($aList['items'])) {
            return [];
        }

        return $aList['items'];
    }

    /**
     * Отдает набор найденных записей.
     *
     * @param string $sText поисковый запрос
     * @param int $iSearchType тип поиска
     * @param int int $iSection
     * @param int[] $aDenySections
     *
     * @return string[]
     */
    private function getSearchCatalog($sText, $iSearchType, $iSection = self::defSection, $aDenySections = [])
    {
        $aList = Selector::create()
            ->searchText($sText)
            ->limit(100, 1)
            ->searchType($iSearchType)
            ->type(Type::inCatalog)
            ->denySection($aDenySections)
            ->section($iSection)
            ->find();

        if (!isset($aList['items'])) {
            return [];
        }

        return $aList['items'];
    }

    /**
     * @covers \skewer\components\search\Selector
     */
    public function testSearch()
    {
        // накидать тестовых примеров
        $this->add('Люcтра Ш белая с синим цветком');
        $this->add('Люcтра R01721 желтая с цветами');
        $this->add('Люcтра R01722 серая без цветов (he is my friend)');
        $this->add('Люcтра R01721 белая с цветами (hello world)');
        $this->addCatalog('Люcтра R0-172 белая с цветами 255 рублей');
        $this->addCatalog('Люcтра R0-173 красная с цветами производителя RIO');
        $this->addCatalog('Лампочка ЕR0-172 красная');

        /*
         * Поиск по Всему
         */

        // любое слово
        $this->assertCount(6, $this->getSearchAll('Люcтра', Type::anyWord));
        $this->assertCount(6, $this->getSearchAll('Люcтра белая', Type::anyWord));

        // все слова
        $this->assertCount(6, $this->getSearchAll('Люcтра', Type::allWords));
        $this->assertCount(3, $this->getSearchAll('Люcтра белая', Type::allWords));

        // точное совпадение
        $this->assertCount(6, $this->getSearchAll('Люcтра', Type::exact));
        $this->assertCount(2, $this->getSearchAll('белая с цветами', Type::exact));

        /*
         * Инфо поиск (Без каталога!)
         */

        // любое сдлво
        $this->assertCount(4, $this->getSearch('Люcтра', Type::anyWord));
        $this->assertCount(4, $this->getSearch('Люcтра белая', Type::anyWord));
        $this->assertCount(4, $this->getSearch('цветы', Type::anyWord));
        $this->assertCount(1, $this->getSearch('желтые', Type::anyWord), 'Не работает отброс окончиний слова');

        // все слова
        $this->assertCount(2, $this->getSearch('Люcтра белая', Type::allWords));
        $this->assertCount(4, $this->getSearch('Люcтра', Type::allWords));

        // точное совпадение
        $this->assertCount(4, $this->getSearch('Люcтра', Type::exact));
        $this->assertCount(0, $this->getSearch('Люcтра белая', Type::exact));
        $this->assertCount(0, $this->getSearch('цветы', Type::exact));
        $this->assertCount(1, $this->getSearch('цветком', Type::exact));
        $this->assertCount(1, $this->getSearch('R01722 серая', Type::exact));
        $this->assertCount(1, $this->getSearch('белая с цветами', Type::exact));
        $this->assertCount(0, $this->getSearch('лая с цветами', Type::exact), 'работает с кусками слов');

        /*
         * Поиск по каталогу
         */

        // любое слово
        $this->assertCount(2, $this->getSearchCatalog('Люcтра', Type::anyWord));
        $this->assertCount(2, $this->getSearchCatalog('Люcтра белая', Type::anyWord));

        // все слова
        $this->assertCount(2, $this->getSearchCatalog('Люcтра', Type::allWords));
        $this->assertCount(1, $this->getSearchCatalog('Люcтра белая', Type::allWords));

        // точное совпадение
        $this->assertCount(2, $this->getSearchCatalog('Люcтра', Type::exact));
        $this->assertCount(1, $this->getSearchCatalog('белая с цветами', Type::exact));
        // + неиндексируемые слова
        $this->assertCount(1, $this->getSearch('he is my', Type::exact));
        $this->assertCount(1, $this->getSearch('hello world', Type::exact));

        //Короткие слова
        $this->assertCount(1, $this->getSearch('Ш', Type::anyWord));
        $this->assertCount(1, $this->getSearchCatalog('255', Type::allWords));
        $this->assertCount(1, $this->getSearchCatalog('R0-172', Type::allWords));
        $this->assertCount(1, $this->getSearchCatalog('RIO', Type::allWords));
        $this->assertCount(2, $this->getSearchCatalog('R0', Type::allWords), 'ошибка поиска по короткому слову до дефиса');

        // Различные артикулы
        $this->addCatalog('020-1136 Y500AA-24.1 1.47.005.09 1078/5S 9100/RA6+9150/R02 3551JT1005M* TBX(M)400');
        $this->assertCount(1, $this->getSearchCatalog('020-1136', Type::allWords));
        $this->assertCount(1, $this->getSearchCatalog('020', Type::allWords), 'ошибка поиска по короткому слову до дефиса');
        $this->assertCount(1, $this->getSearchCatalog('Y500AA-24.1', Type::allWords));
        $this->assertCount(1, $this->getSearchCatalog('Y500AA', Type::allWords));
        $this->assertCount(1, $this->getSearchCatalog('1.47.005.09', Type::allWords));
        $this->assertCount(1, $this->getSearchCatalog('1078/5S', Type::allWords));
        $this->assertCount(1, $this->getSearchCatalog('9100/RA6+9150/R02', Type::allWords));
        $this->assertCount(1, $this->getSearchCatalog('3551JT1005M*', Type::allWords));
        $this->assertCount(1, $this->getSearchCatalog('TBX(M)400', Type::allWords));
    }

    /**
     * @covers \skewer\components\search\Api::getByHref
     */
    public function testGetByHref()
    {
        $sHref = '/awegdasfhr/jsdkjsgkrtdsk/srktjerjw/';

        $this->assertNull(Api::getByHref($sHref));

        $oRow = new SearchIndex();
        $oRow->search_title = '8';
        $oRow->status = 1;
        $oRow->use_in_search = 1;
        $oRow->use_in_sitemap = 1;
        $oRow->search_text = '9';
        $oRow->object_id = 1239;
        $oRow->class_name = 'Test6';
        $oRow->section_id = self::defSection;
        $oRow->language = \Yii::$app->language;
        $oRow->href = $sHref;
        $oRow->save();

        $this->assertInstanceOf('skewer\components\search\models\SearchIndex', Api::getByHref($sHref));

        $oRow->delete();

        $this->assertNull(Api::getByHref($sHref));
    }

    /**
     * Была проблема в #30397
     * Есть три товара с названиями hello, hello2 и hello3
     * Ищутся только 2 последних.
     *
     * @covers \skewer\components\search\Selector
     */
    public function testSearchShortWithoutNum()
    {
        $aNewsTitles = [
            'hello',
            'hello2',
            'hello3',
        ];

        $this->assertEmpty(
            $this->getSearchAll('hello', Type::anyWord),
            'тестовая база уже содержит искомые значения'
        );

        foreach ($aNewsTitles as $sTitle) {
            $this->add($sTitle);
        }

        $aList = $this->getSearchAll('hello', Type::anyWord);

        $this->assertCount(3, $aList, 'Ошибка при поиске неиндексируемого слова hello');
    }
}
